from requests.exceptions import HTTPError, Timeout, RequestException
import logging
from src.vat.plugins.ssl_handler import handle_ssl_verification
from src.vat.plugins.xss_handler import check_xss

logging.basicConfig(filename='error_log.txt', level=logging.ERROR,
                    format='%(asctime)s:%(levelname)s:%(message)s')


def make_request(url, payload=None, verify_ssl=True, ssl_cert=None, ignore_ssl_errors=False, verbose=False):
    try:
        response, success = handle_ssl_verification(
            url, verify_ssl, ssl_cert, ignore_ssl_errors)
        if not success:
            return None, False, False

        if payload:
            vulnerable = check_xss(
                url, payload, verify_ssl, ssl_cert, ignore_ssl_errors, verbose)
            return response, True, vulnerable

        return response, True, False

    except HTTPError as http_error:
        logging.error(f"HTTP Error encountered for {url}: {http_error}")
        if verbose:
            print(
                f"Error: Failed to make the request. HTTP Error: {http_error}")
        return None, False, False

    except Timeout as timeout_error:
        logging.error(f"Timeout Error encountered for {url}: {timeout_error}")
        if verbose:
            print(f"Error: Request timed out. Timeout Error: {timeout_error}")
        return None, False, False

    except RequestException as request_exception:
        logging.error(
            f"Error occurred while making the request to {url}: {request_exception}")
        if verbose:
            print(
                f"Error: Failed to make the request. Details: {request_exception}")
        return None, False, False
