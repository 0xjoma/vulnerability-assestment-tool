# ssl_handler.py

import requests
from requests.exceptions import SSLError
import logging


def handle_ssl_verification(url, verify_ssl=True, ssl_cert=None, ignore_ssl_errors=False):
    try:
        response = requests.get(url, verify=verify_ssl, cert=ssl_cert)
        response.raise_for_status()
        return response, True
    except SSLError as ssl_error:
        logging.error(
            f"SSL Certificate Error encountered for {url}: {ssl_error}")
        logging.error(f"Stack Trace: {ssl_error.__traceback__}")

        if ignore_ssl_errors:
            print("SSL Certificate Error: Ignoring SSL errors and proceeding...")
            try:
                response = requests.get(url, verify=False)
                response.raise_for_status()
                return response, True
            except requests.RequestException as e:
                logging.error(
                    f"Error occurred while making the request without SSL verification: {e}")
                logging.error(f"Stack Trace: {e.__traceback__}")
                print("Error: Failed to make the request without SSL verification.")
                return None, False
        else:
            print(
                "SSL Certificate Error: The site's security certificate is not trusted.")
            return None, False
