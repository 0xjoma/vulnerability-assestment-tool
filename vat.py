# vat.py

# Imports
import argparse
import requests

# Function to parse command-line arguments
def parse_arguments():
    parser = argparse.ArgumentParser(description="Vulnerability Assessment Tool")
    parser.add_argument("url", help="Target URL to scan")
    parser.add_argument("--plugin", default="xss", choices=["xss"], help="Vulnerability plugin to use. Default is XSS.")
    parser.add_argument("--no-verify", action="store_true", help="Disable SSL verification")
    return parser.parse_args()

def main():
    args = parse_arguments()
    print(f"Scanning {args.url} using the {args.plugin} plugin...")

if __name__ == "__main__":
    main()

# Function to make HTTP/S requests
def make_request(url, payload=None, verify_ssl=True):
    try:
        if payload:
            response = requests.get(url, params=payload, verify=verify_ssl)
        else:
            response = requests.get(url, verify=verify_ssl)
        return response, True
    except requests.exceptions.SSLError as ssl_error:
        print(f"SSL Error: {ssl_error}")
        while True:
            choice = input("It's risky to proceed without verifying the SSL certificate. Do you want to continue? (yes/no): ").lower()
            if choice == 'yes':
                print("Proceeding without SSL verification...")
                try:
                    if payload:
                        response = requests.get(url, params=payload, verify=False)
                    else:
                        response = requests.get(url, verify=False)
                    return response, True
                except requests.RequestException as e:
                    print(f"Error making request without SSL verification: {e}")
                    return None, False
            elif choice == 'no':
                print(f"Aborted due to SSL verification failure.")
                return None, False
            else:
                print("Invalid choice. Please enter 'yes' or 'no'.")
    except requests.RequestException as e:
        print(f"Error making request: {e}")
        return None, False
    
# Function to check for reflected XSS
def check_xss(url):
    # A basic payload
    payload = "<script>alert('xss')</script>"
    response, request_made = make_request(url, {"q": payload})

    if response:
        return (payload in response.text, request_made)
    else:
        return False, request_made

# Main function to integrate everything
def main():
    args = parse_arguments()

    if args.plugin == "xss":
        vulnerable, performed_check = check_xss(args.url)
        if performed_check:
            if vulnerable:
                print(f"{args.url} is vulnerable to XSS!")
            else:
                print(f"{args.url} is not vulnerable to XSS.")
        else:
            print(f"Scanning of {args.url} was aborted.")

if __name__ == "__main__":
    main()